// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file way/v1/way.proto (package way.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message way.v1.GetHometownStationsRequest
 */
export class GetHometownStationsRequest extends Message<GetHometownStationsRequest> {
  constructor(data?: PartialMessage<GetHometownStationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "way.v1.GetHometownStationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHometownStationsRequest {
    return new GetHometownStationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHometownStationsRequest {
    return new GetHometownStationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHometownStationsRequest {
    return new GetHometownStationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetHometownStationsRequest | PlainMessage<GetHometownStationsRequest> | undefined, b: GetHometownStationsRequest | PlainMessage<GetHometownStationsRequest> | undefined): boolean {
    return proto3.util.equals(GetHometownStationsRequest, a, b);
  }
}

/**
 * @generated from message way.v1.GetHometownStationsResponse
 */
export class GetHometownStationsResponse extends Message<GetHometownStationsResponse> {
  /**
   * @generated from field: repeated string hometown_stations = 1;
   */
  hometownStations: string[] = [];

  constructor(data?: PartialMessage<GetHometownStationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "way.v1.GetHometownStationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hometown_stations", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetHometownStationsResponse {
    return new GetHometownStationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetHometownStationsResponse {
    return new GetHometownStationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetHometownStationsResponse {
    return new GetHometownStationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetHometownStationsResponse | PlainMessage<GetHometownStationsResponse> | undefined, b: GetHometownStationsResponse | PlainMessage<GetHometownStationsResponse> | undefined): boolean {
    return proto3.util.equals(GetHometownStationsResponse, a, b);
  }
}

/**
 * @generated from message way.v1.GetLinesRequest
 */
export class GetLinesRequest extends Message<GetLinesRequest> {
  /**
   * @generated from field: string hometown_station = 1;
   */
  hometownStation = "";

  /**
   * @generated from field: string ski_resort = 2;
   */
  skiResort = "";

  /**
   * @generated from field: bool is_holiday = 3;
   */
  isHoliday = false;

  constructor(data?: PartialMessage<GetLinesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "way.v1.GetLinesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hometown_station", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ski_resort", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "is_holiday", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLinesRequest {
    return new GetLinesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLinesRequest {
    return new GetLinesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLinesRequest {
    return new GetLinesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLinesRequest | PlainMessage<GetLinesRequest> | undefined, b: GetLinesRequest | PlainMessage<GetLinesRequest> | undefined): boolean {
    return proto3.util.equals(GetLinesRequest, a, b);
  }
}

/**
 * @generated from message way.v1.Run
 */
export class Run extends Message<Run> {
  /**
   * @generated from field: string line_name = 1;
   */
  lineName = "";

  /**
   * @generated from field: string departure_station = 2;
   */
  departureStation = "";

  /**
   * @generated from field: uint32 departure_hour = 3;
   */
  departureHour = 0;

  /**
   * @generated from field: uint32 departure_minute = 4;
   */
  departureMinute = 0;

  /**
   * @generated from field: string arrival_station = 5;
   */
  arrivalStation = "";

  /**
   * @generated from field: uint32 arrival_hour = 6;
   */
  arrivalHour = 0;

  /**
   * @generated from field: uint32 arrival_minute = 7;
   */
  arrivalMinute = 0;

  constructor(data?: PartialMessage<Run>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "way.v1.Run";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "departure_station", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "departure_hour", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "departure_minute", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "arrival_station", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "arrival_hour", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "arrival_minute", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Run {
    return new Run().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Run {
    return new Run().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Run {
    return new Run().fromJsonString(jsonString, options);
  }

  static equals(a: Run | PlainMessage<Run> | undefined, b: Run | PlainMessage<Run> | undefined): boolean {
    return proto3.util.equals(Run, a, b);
  }
}

/**
 * @generated from message way.v1.Leg
 */
export class Leg extends Message<Leg> {
  /**
   * @generated from field: string departure_station = 1;
   */
  departureStation = "";

  /**
   * @generated from field: string arrival_station = 2;
   */
  arrivalStation = "";

  /**
   * @generated from field: repeated way.v1.Run runs = 3;
   */
  runs: Run[] = [];

  constructor(data?: PartialMessage<Leg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "way.v1.Leg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "departure_station", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "arrival_station", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "runs", kind: "message", T: Run, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Leg {
    return new Leg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Leg {
    return new Leg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Leg {
    return new Leg().fromJsonString(jsonString, options);
  }

  static equals(a: Leg | PlainMessage<Leg> | undefined, b: Leg | PlainMessage<Leg> | undefined): boolean {
    return proto3.util.equals(Leg, a, b);
  }
}

/**
 * @generated from message way.v1.GetLinesResponse
 */
export class GetLinesResponse extends Message<GetLinesResponse> {
  /**
   * @generated from field: repeated way.v1.Leg all_legs_to_ski = 1;
   */
  allLegsToSki: Leg[] = [];

  /**
   * @generated from field: repeated way.v1.Leg all_legs_home = 2;
   */
  allLegsHome: Leg[] = [];

  constructor(data?: PartialMessage<GetLinesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "way.v1.GetLinesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "all_legs_to_ski", kind: "message", T: Leg, repeated: true },
    { no: 2, name: "all_legs_home", kind: "message", T: Leg, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLinesResponse {
    return new GetLinesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLinesResponse {
    return new GetLinesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLinesResponse {
    return new GetLinesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLinesResponse | PlainMessage<GetLinesResponse> | undefined, b: GetLinesResponse | PlainMessage<GetLinesResponse> | undefined): boolean {
    return proto3.util.equals(GetLinesResponse, a, b);
  }
}

